//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Logic/Grammar/Logic.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Fictoria.Logic.Lexer {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class LogicParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, STRING=20, IF=21, ELSE=22, IDENTIFIER=23, INT=24, 
		FLOAT=25, ARROW=26, AT=27, AMP=28, TILDE=29, QUESTION=30, WILDCARD=31, 
		EQUALS=32, OPEN_PAREN=33, CLOSE_PAREN=34, OPEN_BRACK=35, CLOSE_BRACK=36, 
		OPEN_BRACE=37, CLOSE_BRACE=38, PIPE=39, COLON=40, SEMICOLON=41, COMMA=42, 
		PERIOD=43, WHITESPACE=44, LINE_COMMENT=45;
	public const int
		RULE_logic = 0, RULE_statement = 1, RULE_type = 2, RULE_instance = 3, 
		RULE_schema = 4, RULE_fact = 5, RULE_antifact = 6, RULE_function = 7, 
		RULE_action = 8, RULE_struct = 9, RULE_field = 10, RULE_series = 11, RULE_expression = 12, 
		RULE_if = 13, RULE_condition = 14, RULE_block = 15, RULE_assign = 16, 
		RULE_call = 17, RULE_parenthetical = 18, RULE_tuple = 19, RULE_wildcard = 20, 
		RULE_literal = 21, RULE_literalBool = 22, RULE_literalInt = 23, RULE_literalFloat = 24, 
		RULE_literalString = 25, RULE_binding = 26, RULE_parameter = 27, RULE_many = 28, 
		RULE_variance = 29, RULE_identifier = 30;
	public static readonly string[] ruleNames = {
		"logic", "statement", "type", "instance", "schema", "fact", "antifact", 
		"function", "action", "struct", "field", "series", "expression", "if", 
		"condition", "block", "assign", "call", "parenthetical", "tuple", "wildcard", 
		"literal", "literalBool", "literalInt", "literalFloat", "literalString", 
		"binding", "parameter", "many", "variance", "identifier"
	};

	private static readonly string[] _LiteralNames = {
		null, "'instance'", "'-'", "'!'", "'::'", "'^'", "'*'", "'/'", "'+'", 
		"'>'", "'<'", "'>='", "'<='", "'=='", "'!='", "'and'", "'or'", "'xor'", 
		"'true'", "'false'", null, "'if'", "'else'", null, null, null, "'->'", 
		"'@'", "'&'", "'~'", "'?'", "'_'", "'='", "'('", "')'", "'['", "']'", 
		"'{'", "'}'", "'|'", "':'", "';'", "','", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "STRING", "IF", "ELSE", 
		"IDENTIFIER", "INT", "FLOAT", "ARROW", "AT", "AMP", "TILDE", "QUESTION", 
		"WILDCARD", "EQUALS", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACK", "CLOSE_BRACK", 
		"OPEN_BRACE", "CLOSE_BRACE", "PIPE", "COLON", "SEMICOLON", "COMMA", "PERIOD", 
		"WHITESPACE", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Logic.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LogicParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LogicParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LogicParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class LogicContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(LogicParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public LogicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logic; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterLogic(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitLogic(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicContext logic() {
		LogicContext _localctx = new LogicContext(Context, State);
		EnterRule(_localctx, 0, RULE_logic);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 62;
				statement();
				}
				}
				State = 65;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 813694978L) != 0) );
			State = 67;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstanceContext instance() {
			return GetRuleContext<InstanceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SchemaContext schema() {
			return GetRuleContext<SchemaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactContext fact() {
			return GetRuleContext<FactContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AntifactContext antifact() {
			return GetRuleContext<AntifactContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 76;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 69;
				type();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 70;
				instance();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 71;
				schema();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 72;
				fact();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 73;
				antifact();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 74;
				function();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 75;
				action();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(LogicParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERIOD() { return GetToken(LogicParser.PERIOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(LogicParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(LogicParser.COMMA, i);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 4, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			identifier();
			State = 79;
			Match(COLON);
			State = 80;
			identifier();
			State = 85;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 81;
				Match(COMMA);
				State = 82;
				identifier();
				}
				}
				State = 87;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 88;
			Match(PERIOD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstanceContext : ParserRuleContext {
		public ExpressionContext name;
		public ExpressionContext of;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(LogicParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(LogicParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(LogicParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERIOD() { return GetToken(LogicParser.PERIOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public InstanceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instance; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterInstance(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitInstance(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstance(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstanceContext instance() {
		InstanceContext _localctx = new InstanceContext(Context, State);
		EnterRule(_localctx, 6, RULE_instance);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			Match(T__0);
			State = 91;
			Match(OPEN_PAREN);
			State = 92;
			_localctx.name = expression(0);
			State = 93;
			Match(COMMA);
			State = 94;
			_localctx.of = expression(0);
			State = 95;
			Match(CLOSE_PAREN);
			State = 96;
			Match(PERIOD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SchemaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(LogicParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(LogicParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERIOD() { return GetToken(LogicParser.PERIOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(LogicParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(LogicParser.COMMA, i);
		}
		public SchemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schema; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterSchema(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitSchema(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSchema(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SchemaContext schema() {
		SchemaContext _localctx = new SchemaContext(Context, State);
		EnterRule(_localctx, 8, RULE_schema);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			identifier();
			State = 99;
			Match(OPEN_PAREN);
			State = 100;
			parameter();
			State = 105;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 101;
				Match(COMMA);
				State = 102;
				parameter();
				}
				}
				State = 107;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 108;
			Match(CLOSE_PAREN);
			State = 109;
			Match(PERIOD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(LogicParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(LogicParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERIOD() { return GetToken(LogicParser.PERIOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(LogicParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(LogicParser.COMMA, i);
		}
		public FactContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fact; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterFact(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitFact(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFact(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactContext fact() {
		FactContext _localctx = new FactContext(Context, State);
		EnterRule(_localctx, 10, RULE_fact);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			identifier();
			State = 112;
			Match(OPEN_PAREN);
			State = 113;
			expression(0);
			State = 118;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 114;
				Match(COMMA);
				State = 115;
				expression(0);
				}
				}
				State = 120;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 121;
			Match(CLOSE_PAREN);
			State = 122;
			Match(PERIOD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AntifactContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CallContext call() {
			return GetRuleContext<CallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERIOD() { return GetToken(LogicParser.PERIOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TILDE() { return GetToken(LogicParser.TILDE, 0); }
		public AntifactContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_antifact; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterAntifact(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitAntifact(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAntifact(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AntifactContext antifact() {
		AntifactContext _localctx = new AntifactContext(Context, State);
		EnterRule(_localctx, 12, RULE_antifact);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TILDE) {
				{
				State = 124;
				Match(TILDE);
				}
			}

			State = 127;
			call();
			State = 128;
			Match(PERIOD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(LogicParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(LogicParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(LogicParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SeriesContext series() {
			return GetRuleContext<SeriesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERIOD() { return GetToken(LogicParser.PERIOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(LogicParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(LogicParser.COMMA, i);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 14, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130;
			identifier();
			State = 131;
			Match(OPEN_PAREN);
			State = 133;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 132;
				parameter();
				}
			}

			State = 139;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 135;
				Match(COMMA);
				State = 136;
				parameter();
				}
				}
				State = 141;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 142;
			Match(CLOSE_PAREN);
			State = 143;
			Match(EQUALS);
			State = 144;
			series();
			State = 145;
			Match(PERIOD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(LogicParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(LogicParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(LogicParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructContext @struct() {
			return GetRuleContext<StructContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERIOD() { return GetToken(LogicParser.PERIOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(LogicParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(LogicParser.COMMA, i);
		}
		public ActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionContext action() {
		ActionContext _localctx = new ActionContext(Context, State);
		EnterRule(_localctx, 16, RULE_action);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			identifier();
			State = 148;
			Match(OPEN_PAREN);
			State = 150;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 149;
				parameter();
				}
			}

			State = 156;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 152;
				Match(COMMA);
				State = 153;
				parameter();
				}
				}
				State = 158;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 159;
			Match(CLOSE_PAREN);
			State = 160;
			Match(ARROW);
			State = 161;
			@struct();
			State = 162;
			Match(PERIOD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(LogicParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(LogicParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		public StructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructContext @struct() {
		StructContext _localctx = new StructContext(Context, State);
		EnterRule(_localctx, 18, RULE_struct);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164;
			Match(OPEN_BRACE);
			State = 168;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==STRING) {
				{
				{
				State = 165;
				field();
				}
				}
				State = 170;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 171;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralStringContext literalString() {
			return GetRuleContext<LiteralStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(LogicParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SeriesContext series() {
			return GetRuleContext<SeriesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERIOD() { return GetToken(LogicParser.PERIOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(Context, State);
		EnterRule(_localctx, 20, RULE_field);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173;
			literalString();
			State = 174;
			Match(COLON);
			State = 183;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 176;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 175;
					statement();
					}
					}
					State = 178;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 813694978L) != 0) );
				}
				break;
			case 2:
				{
				State = 180;
				series();
				State = 181;
				Match(PERIOD);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeriesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(LogicParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(LogicParser.SEMICOLON, i);
		}
		public SeriesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_series; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterSeries(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitSeries(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeries(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SeriesContext series() {
		SeriesContext _localctx = new SeriesContext(Context, State);
		EnterRule(_localctx, 22, RULE_series);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			expression(0);
			State = 190;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMICOLON) {
				{
				{
				State = 186;
				Match(SEMICOLON);
				State = 187;
				expression(0);
				}
				}
				State = 192;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AssignExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignContext assign() {
			return GetRuleContext<AssignContext>(0);
		}
		public AssignExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterAssignExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitAssignExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IdentifierExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterIdentifierExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitIdentifierExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParentheticalContext parenthetical() {
			return GetRuleContext<ParentheticalContext>(0);
		}
		public ParenExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterParenExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitParenExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CallExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public CallContext call() {
			return GetRuleContext<CallContext>(0);
		}
		public CallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterCallExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitCallExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BindingExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public BindingContext binding() {
			return GetRuleContext<BindingContext>(0);
		}
		public BindingExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterBindingExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitBindingExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBindingExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StructExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructContext @struct() {
			return GetRuleContext<StructContext>(0);
		}
		public StructExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterStructExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitStructExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TupleExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public TupleContext tuple() {
			return GetRuleContext<TupleContext>(0);
		}
		public TupleExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterTupleExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitTupleExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InfixExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TILDE() { return GetToken(LogicParser.TILDE, 0); }
		public InfixExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterInfixExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitInfixExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInfixExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WildcardExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public WildcardContext wildcard() {
			return GetRuleContext<WildcardContext>(0);
		}
		public WildcardExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterWildcardExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitWildcardExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWildcardExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IndexExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACK() { return GetToken(LogicParser.OPEN_BRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACK() { return GetToken(LogicParser.CLOSE_BRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IndexExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterIndexExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitIndexExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterLiteralExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitLiteralExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfContext @if() {
			return GetRuleContext<IfContext>(0);
		}
		public IfExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterIfExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitIfExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryExpressionContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 206;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				_localctx = new LiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 194;
				literal();
				}
				break;
			case 2:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 195;
				identifier();
				}
				break;
			case 3:
				{
				_localctx = new WildcardExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 196;
				wildcard();
				}
				break;
			case 4:
				{
				_localctx = new BindingExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 197;
				binding();
				}
				break;
			case 5:
				{
				_localctx = new ParenExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 198;
				parenthetical();
				}
				break;
			case 6:
				{
				_localctx = new TupleExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 199;
				tuple();
				}
				break;
			case 7:
				{
				_localctx = new CallExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 200;
				call();
				}
				break;
			case 8:
				{
				_localctx = new AssignExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 201;
				assign();
				}
				break;
			case 9:
				{
				_localctx = new IfExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 202;
				@if();
				}
				break;
			case 10:
				{
				_localctx = new StructExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 203;
				@struct();
				}
				break;
			case 11:
				{
				_localctx = new UnaryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 204;
				((UnaryExpressionContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==T__1 || _la==T__2) ) {
					((UnaryExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 205;
				expression(10);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 239;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 237;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
					case 1:
						{
						_localctx = new InfixExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((InfixExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 208;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 209;
						((InfixExpressionContext)_localctx).op = Match(T__3);
						State = 210;
						((InfixExpressionContext)_localctx).right = expression(10);
						}
						break;
					case 2:
						{
						_localctx = new InfixExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((InfixExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 211;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 212;
						((InfixExpressionContext)_localctx).op = Match(T__4);
						State = 213;
						((InfixExpressionContext)_localctx).right = expression(9);
						}
						break;
					case 3:
						{
						_localctx = new InfixExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((InfixExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 214;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 215;
						((InfixExpressionContext)_localctx).op = Match(TILDE);
						State = 216;
						((InfixExpressionContext)_localctx).right = expression(8);
						}
						break;
					case 4:
						{
						_localctx = new InfixExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((InfixExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 217;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 218;
						((InfixExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__5 || _la==T__6) ) {
							((InfixExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 219;
						((InfixExpressionContext)_localctx).right = expression(7);
						}
						break;
					case 5:
						{
						_localctx = new InfixExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((InfixExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 220;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 221;
						((InfixExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__1 || _la==T__7) ) {
							((InfixExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 222;
						((InfixExpressionContext)_localctx).right = expression(6);
						}
						break;
					case 6:
						{
						_localctx = new InfixExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((InfixExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 223;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 224;
						((InfixExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 7680L) != 0)) ) {
							((InfixExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 225;
						((InfixExpressionContext)_localctx).right = expression(5);
						}
						break;
					case 7:
						{
						_localctx = new InfixExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((InfixExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 226;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 227;
						((InfixExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__12 || _la==T__13) ) {
							((InfixExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 228;
						((InfixExpressionContext)_localctx).right = expression(4);
						}
						break;
					case 8:
						{
						_localctx = new InfixExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((InfixExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 229;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 230;
						((InfixExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 229376L) != 0)) ) {
							((InfixExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 231;
						((InfixExpressionContext)_localctx).right = expression(3);
						}
						break;
					case 9:
						{
						_localctx = new IndexExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((IndexExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 232;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 233;
						Match(OPEN_BRACK);
						State = 234;
						((IndexExpressionContext)_localctx).right = expression(0);
						State = 235;
						Match(CLOSE_BRACK);
						}
						break;
					}
					} 
				}
				State = 241;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class IfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF() { return GetTokens(LogicParser.IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF(int i) {
			return GetToken(LogicParser.IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext[] condition() {
			return GetRuleContexts<ConditionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition(int i) {
			return GetRuleContext<ConditionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELSE() { return GetTokens(LogicParser.ELSE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE(int i) {
			return GetToken(LogicParser.ELSE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfContext @if() {
		IfContext _localctx = new IfContext(Context, State);
		EnterRule(_localctx, 26, RULE_if);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 242;
			Match(IF);
			State = 243;
			condition();
			State = 249;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 244;
					Match(ELSE);
					State = 245;
					Match(IF);
					State = 246;
					condition();
					}
					} 
				}
				State = 251;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			State = 254;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				State = 252;
				Match(ELSE);
				State = 253;
				block();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(LogicParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(LogicParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(LogicParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(LogicParser.SEMICOLON, i);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 28, RULE_condition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 256;
			Match(OPEN_PAREN);
			State = 257;
			expression(0);
			State = 262;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMICOLON) {
				{
				{
				State = 258;
				Match(SEMICOLON);
				State = 259;
				expression(0);
				}
				}
				State = 264;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 265;
			Match(CLOSE_PAREN);
			State = 266;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(LogicParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(LogicParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(LogicParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(LogicParser.SEMICOLON, i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 30, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268;
			Match(OPEN_BRACE);
			State = 269;
			expression(0);
			State = 274;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMICOLON) {
				{
				{
				State = 270;
				Match(SEMICOLON);
				State = 271;
				expression(0);
				}
				}
				State = 276;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 277;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(LogicParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignContext assign() {
		AssignContext _localctx = new AssignContext(Context, State);
		EnterRule(_localctx, 32, RULE_assign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			identifier();
			State = 280;
			Match(EQUALS);
			State = 281;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(LogicParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(LogicParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ManyContext many() {
			return GetRuleContext<ManyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(LogicParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(LogicParser.COMMA, i);
		}
		public CallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallContext call() {
		CallContext _localctx = new CallContext(Context, State);
		EnterRule(_localctx, 34, RULE_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 284;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AMP) {
				{
				State = 283;
				many();
				}
			}

			State = 286;
			identifier();
			State = 287;
			Match(OPEN_PAREN);
			State = 289;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 183001415692L) != 0)) {
				{
				State = 288;
				expression(0);
				}
			}

			State = 295;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 291;
				Match(COMMA);
				State = 292;
				expression(0);
				}
				}
				State = 297;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 298;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParentheticalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(LogicParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(LogicParser.CLOSE_PAREN, 0); }
		public ParentheticalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthetical; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterParenthetical(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitParenthetical(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthetical(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParentheticalContext parenthetical() {
		ParentheticalContext _localctx = new ParentheticalContext(Context, State);
		EnterRule(_localctx, 36, RULE_parenthetical);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300;
			Match(OPEN_PAREN);
			State = 301;
			expression(0);
			State = 302;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACK() { return GetToken(LogicParser.OPEN_BRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACK() { return GetToken(LogicParser.CLOSE_BRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(LogicParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(LogicParser.COMMA, i);
		}
		public TupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTuple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleContext tuple() {
		TupleContext _localctx = new TupleContext(Context, State);
		EnterRule(_localctx, 38, RULE_tuple);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 304;
			Match(OPEN_BRACK);
			State = 305;
			expression(0);
			State = 308;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 306;
				Match(COMMA);
				State = 307;
				expression(0);
				}
				}
				State = 310;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==COMMA );
			State = 312;
			Match(CLOSE_BRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WildcardContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WILDCARD() { return GetToken(LogicParser.WILDCARD, 0); }
		public WildcardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wildcard; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterWildcard(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitWildcard(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWildcard(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WildcardContext wildcard() {
		WildcardContext _localctx = new WildcardContext(Context, State);
		EnterRule(_localctx, 40, RULE_wildcard);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 314;
			Match(WILDCARD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralBoolContext literalBool() {
			return GetRuleContext<LiteralBoolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralIntContext literalInt() {
			return GetRuleContext<LiteralIntContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralFloatContext literalFloat() {
			return GetRuleContext<LiteralFloatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralStringContext literalString() {
			return GetRuleContext<LiteralStringContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 42, RULE_literal);
		try {
			State = 320;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__17:
			case T__18:
				EnterOuterAlt(_localctx, 1);
				{
				State = 316;
				literalBool();
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 317;
				literalInt();
				}
				break;
			case FLOAT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 318;
				literalFloat();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 319;
				literalString();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralBoolContext : ParserRuleContext {
		public LiteralBoolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalBool; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterLiteralBool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitLiteralBool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralBool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralBoolContext literalBool() {
		LiteralBoolContext _localctx = new LiteralBoolContext(Context, State);
		EnterRule(_localctx, 44, RULE_literalBool);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 322;
			_la = TokenStream.LA(1);
			if ( !(_la==T__17 || _la==T__18) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralIntContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(LogicParser.INT, 0); }
		public LiteralIntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalInt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterLiteralInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitLiteralInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralIntContext literalInt() {
		LiteralIntContext _localctx = new LiteralIntContext(Context, State);
		EnterRule(_localctx, 46, RULE_literalInt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 324;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralFloatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(LogicParser.FLOAT, 0); }
		public LiteralFloatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalFloat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterLiteralFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitLiteralFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralFloat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralFloatContext literalFloat() {
		LiteralFloatContext _localctx = new LiteralFloatContext(Context, State);
		EnterRule(_localctx, 48, RULE_literalFloat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 326;
			Match(FLOAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(LogicParser.STRING, 0); }
		public LiteralStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterLiteralString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitLiteralString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralStringContext literalString() {
		LiteralStringContext _localctx = new LiteralStringContext(Context, State);
		EnterRule(_localctx, 50, RULE_literalString);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 328;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BindingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(LogicParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public BindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binding; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterBinding(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitBinding(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinding(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BindingContext binding() {
		BindingContext _localctx = new BindingContext(Context, State);
		EnterRule(_localctx, 52, RULE_binding);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 330;
			Match(AT);
			State = 331;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(LogicParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarianceContext variance() {
			return GetRuleContext<VarianceContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 54, RULE_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 333;
			identifier();
			State = 334;
			Match(COLON);
			State = 336;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1 || _la==T__7) {
				{
				State = 335;
				variance();
				}
			}

			State = 338;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ManyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMP() { return GetToken(LogicParser.AMP, 0); }
		public ManyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_many; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterMany(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitMany(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMany(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ManyContext many() {
		ManyContext _localctx = new ManyContext(Context, State);
		EnterRule(_localctx, 56, RULE_many);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 340;
			Match(AMP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarianceContext : ParserRuleContext {
		public VarianceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variance; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterVariance(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitVariance(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariance(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarianceContext variance() {
		VarianceContext _localctx = new VarianceContext(Context, State);
		EnterRule(_localctx, 58, RULE_variance);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 342;
			_la = TokenStream.LA(1);
			if ( !(_la==T__1 || _la==T__7) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LogicParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 60, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 344;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 12: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 9);
		case 1: return Precpred(Context, 8);
		case 2: return Precpred(Context, 7);
		case 3: return Precpred(Context, 6);
		case 4: return Precpred(Context, 5);
		case 5: return Precpred(Context, 4);
		case 6: return Precpred(Context, 3);
		case 7: return Precpred(Context, 2);
		case 8: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,45,347,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,1,0,4,0,64,8,0,11,0,12,0,65,1,0,1,0,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,3,1,77,8,1,1,2,1,2,1,2,1,2,1,2,5,2,84,8,2,10,2,12,2,87,9,
		2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,5,4,104,
		8,4,10,4,12,4,107,9,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,5,5,117,8,5,10,5,
		12,5,120,9,5,1,5,1,5,1,5,1,6,3,6,126,8,6,1,6,1,6,1,6,1,7,1,7,1,7,3,7,134,
		8,7,1,7,1,7,5,7,138,8,7,10,7,12,7,141,9,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,
		1,8,3,8,151,8,8,1,8,1,8,5,8,155,8,8,10,8,12,8,158,9,8,1,8,1,8,1,8,1,8,
		1,8,1,9,1,9,5,9,167,8,9,10,9,12,9,170,9,9,1,9,1,9,1,10,1,10,1,10,4,10,
		177,8,10,11,10,12,10,178,1,10,1,10,1,10,3,10,184,8,10,1,11,1,11,1,11,5,
		11,189,8,11,10,11,12,11,192,9,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
		12,1,12,1,12,1,12,1,12,1,12,3,12,207,8,12,1,12,1,12,1,12,1,12,1,12,1,12,
		1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
		1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,5,12,238,8,12,10,12,12,12,
		241,9,12,1,13,1,13,1,13,1,13,1,13,5,13,248,8,13,10,13,12,13,251,9,13,1,
		13,1,13,3,13,255,8,13,1,14,1,14,1,14,1,14,5,14,261,8,14,10,14,12,14,264,
		9,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,5,15,273,8,15,10,15,12,15,276,
		9,15,1,15,1,15,1,16,1,16,1,16,1,16,1,17,3,17,285,8,17,1,17,1,17,1,17,3,
		17,290,8,17,1,17,1,17,5,17,294,8,17,10,17,12,17,297,9,17,1,17,1,17,1,18,
		1,18,1,18,1,18,1,19,1,19,1,19,1,19,4,19,309,8,19,11,19,12,19,310,1,19,
		1,19,1,20,1,20,1,21,1,21,1,21,1,21,3,21,321,8,21,1,22,1,22,1,23,1,23,1,
		24,1,24,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,3,27,337,8,27,1,27,1,27,
		1,28,1,28,1,29,1,29,1,30,1,30,1,30,0,1,24,31,0,2,4,6,8,10,12,14,16,18,
		20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,0,7,1,0,
		2,3,1,0,6,7,2,0,2,2,8,8,1,0,9,12,1,0,13,14,1,0,15,17,1,0,18,19,365,0,63,
		1,0,0,0,2,76,1,0,0,0,4,78,1,0,0,0,6,90,1,0,0,0,8,98,1,0,0,0,10,111,1,0,
		0,0,12,125,1,0,0,0,14,130,1,0,0,0,16,147,1,0,0,0,18,164,1,0,0,0,20,173,
		1,0,0,0,22,185,1,0,0,0,24,206,1,0,0,0,26,242,1,0,0,0,28,256,1,0,0,0,30,
		268,1,0,0,0,32,279,1,0,0,0,34,284,1,0,0,0,36,300,1,0,0,0,38,304,1,0,0,
		0,40,314,1,0,0,0,42,320,1,0,0,0,44,322,1,0,0,0,46,324,1,0,0,0,48,326,1,
		0,0,0,50,328,1,0,0,0,52,330,1,0,0,0,54,333,1,0,0,0,56,340,1,0,0,0,58,342,
		1,0,0,0,60,344,1,0,0,0,62,64,3,2,1,0,63,62,1,0,0,0,64,65,1,0,0,0,65,63,
		1,0,0,0,65,66,1,0,0,0,66,67,1,0,0,0,67,68,5,0,0,1,68,1,1,0,0,0,69,77,3,
		4,2,0,70,77,3,6,3,0,71,77,3,8,4,0,72,77,3,10,5,0,73,77,3,12,6,0,74,77,
		3,14,7,0,75,77,3,16,8,0,76,69,1,0,0,0,76,70,1,0,0,0,76,71,1,0,0,0,76,72,
		1,0,0,0,76,73,1,0,0,0,76,74,1,0,0,0,76,75,1,0,0,0,77,3,1,0,0,0,78,79,3,
		60,30,0,79,80,5,40,0,0,80,85,3,60,30,0,81,82,5,42,0,0,82,84,3,60,30,0,
		83,81,1,0,0,0,84,87,1,0,0,0,85,83,1,0,0,0,85,86,1,0,0,0,86,88,1,0,0,0,
		87,85,1,0,0,0,88,89,5,43,0,0,89,5,1,0,0,0,90,91,5,1,0,0,91,92,5,33,0,0,
		92,93,3,24,12,0,93,94,5,42,0,0,94,95,3,24,12,0,95,96,5,34,0,0,96,97,5,
		43,0,0,97,7,1,0,0,0,98,99,3,60,30,0,99,100,5,33,0,0,100,105,3,54,27,0,
		101,102,5,42,0,0,102,104,3,54,27,0,103,101,1,0,0,0,104,107,1,0,0,0,105,
		103,1,0,0,0,105,106,1,0,0,0,106,108,1,0,0,0,107,105,1,0,0,0,108,109,5,
		34,0,0,109,110,5,43,0,0,110,9,1,0,0,0,111,112,3,60,30,0,112,113,5,33,0,
		0,113,118,3,24,12,0,114,115,5,42,0,0,115,117,3,24,12,0,116,114,1,0,0,0,
		117,120,1,0,0,0,118,116,1,0,0,0,118,119,1,0,0,0,119,121,1,0,0,0,120,118,
		1,0,0,0,121,122,5,34,0,0,122,123,5,43,0,0,123,11,1,0,0,0,124,126,5,29,
		0,0,125,124,1,0,0,0,125,126,1,0,0,0,126,127,1,0,0,0,127,128,3,34,17,0,
		128,129,5,43,0,0,129,13,1,0,0,0,130,131,3,60,30,0,131,133,5,33,0,0,132,
		134,3,54,27,0,133,132,1,0,0,0,133,134,1,0,0,0,134,139,1,0,0,0,135,136,
		5,42,0,0,136,138,3,54,27,0,137,135,1,0,0,0,138,141,1,0,0,0,139,137,1,0,
		0,0,139,140,1,0,0,0,140,142,1,0,0,0,141,139,1,0,0,0,142,143,5,34,0,0,143,
		144,5,32,0,0,144,145,3,22,11,0,145,146,5,43,0,0,146,15,1,0,0,0,147,148,
		3,60,30,0,148,150,5,33,0,0,149,151,3,54,27,0,150,149,1,0,0,0,150,151,1,
		0,0,0,151,156,1,0,0,0,152,153,5,42,0,0,153,155,3,54,27,0,154,152,1,0,0,
		0,155,158,1,0,0,0,156,154,1,0,0,0,156,157,1,0,0,0,157,159,1,0,0,0,158,
		156,1,0,0,0,159,160,5,34,0,0,160,161,5,26,0,0,161,162,3,18,9,0,162,163,
		5,43,0,0,163,17,1,0,0,0,164,168,5,37,0,0,165,167,3,20,10,0,166,165,1,0,
		0,0,167,170,1,0,0,0,168,166,1,0,0,0,168,169,1,0,0,0,169,171,1,0,0,0,170,
		168,1,0,0,0,171,172,5,38,0,0,172,19,1,0,0,0,173,174,3,50,25,0,174,183,
		5,40,0,0,175,177,3,2,1,0,176,175,1,0,0,0,177,178,1,0,0,0,178,176,1,0,0,
		0,178,179,1,0,0,0,179,184,1,0,0,0,180,181,3,22,11,0,181,182,5,43,0,0,182,
		184,1,0,0,0,183,176,1,0,0,0,183,180,1,0,0,0,184,21,1,0,0,0,185,190,3,24,
		12,0,186,187,5,41,0,0,187,189,3,24,12,0,188,186,1,0,0,0,189,192,1,0,0,
		0,190,188,1,0,0,0,190,191,1,0,0,0,191,23,1,0,0,0,192,190,1,0,0,0,193,194,
		6,12,-1,0,194,207,3,42,21,0,195,207,3,60,30,0,196,207,3,40,20,0,197,207,
		3,52,26,0,198,207,3,36,18,0,199,207,3,38,19,0,200,207,3,34,17,0,201,207,
		3,32,16,0,202,207,3,26,13,0,203,207,3,18,9,0,204,205,7,0,0,0,205,207,3,
		24,12,10,206,193,1,0,0,0,206,195,1,0,0,0,206,196,1,0,0,0,206,197,1,0,0,
		0,206,198,1,0,0,0,206,199,1,0,0,0,206,200,1,0,0,0,206,201,1,0,0,0,206,
		202,1,0,0,0,206,203,1,0,0,0,206,204,1,0,0,0,207,239,1,0,0,0,208,209,10,
		9,0,0,209,210,5,4,0,0,210,238,3,24,12,10,211,212,10,8,0,0,212,213,5,5,
		0,0,213,238,3,24,12,9,214,215,10,7,0,0,215,216,5,29,0,0,216,238,3,24,12,
		8,217,218,10,6,0,0,218,219,7,1,0,0,219,238,3,24,12,7,220,221,10,5,0,0,
		221,222,7,2,0,0,222,238,3,24,12,6,223,224,10,4,0,0,224,225,7,3,0,0,225,
		238,3,24,12,5,226,227,10,3,0,0,227,228,7,4,0,0,228,238,3,24,12,4,229,230,
		10,2,0,0,230,231,7,5,0,0,231,238,3,24,12,3,232,233,10,1,0,0,233,234,5,
		35,0,0,234,235,3,24,12,0,235,236,5,36,0,0,236,238,1,0,0,0,237,208,1,0,
		0,0,237,211,1,0,0,0,237,214,1,0,0,0,237,217,1,0,0,0,237,220,1,0,0,0,237,
		223,1,0,0,0,237,226,1,0,0,0,237,229,1,0,0,0,237,232,1,0,0,0,238,241,1,
		0,0,0,239,237,1,0,0,0,239,240,1,0,0,0,240,25,1,0,0,0,241,239,1,0,0,0,242,
		243,5,21,0,0,243,249,3,28,14,0,244,245,5,22,0,0,245,246,5,21,0,0,246,248,
		3,28,14,0,247,244,1,0,0,0,248,251,1,0,0,0,249,247,1,0,0,0,249,250,1,0,
		0,0,250,254,1,0,0,0,251,249,1,0,0,0,252,253,5,22,0,0,253,255,3,30,15,0,
		254,252,1,0,0,0,254,255,1,0,0,0,255,27,1,0,0,0,256,257,5,33,0,0,257,262,
		3,24,12,0,258,259,5,41,0,0,259,261,3,24,12,0,260,258,1,0,0,0,261,264,1,
		0,0,0,262,260,1,0,0,0,262,263,1,0,0,0,263,265,1,0,0,0,264,262,1,0,0,0,
		265,266,5,34,0,0,266,267,3,30,15,0,267,29,1,0,0,0,268,269,5,37,0,0,269,
		274,3,24,12,0,270,271,5,41,0,0,271,273,3,24,12,0,272,270,1,0,0,0,273,276,
		1,0,0,0,274,272,1,0,0,0,274,275,1,0,0,0,275,277,1,0,0,0,276,274,1,0,0,
		0,277,278,5,38,0,0,278,31,1,0,0,0,279,280,3,60,30,0,280,281,5,32,0,0,281,
		282,3,24,12,0,282,33,1,0,0,0,283,285,3,56,28,0,284,283,1,0,0,0,284,285,
		1,0,0,0,285,286,1,0,0,0,286,287,3,60,30,0,287,289,5,33,0,0,288,290,3,24,
		12,0,289,288,1,0,0,0,289,290,1,0,0,0,290,295,1,0,0,0,291,292,5,42,0,0,
		292,294,3,24,12,0,293,291,1,0,0,0,294,297,1,0,0,0,295,293,1,0,0,0,295,
		296,1,0,0,0,296,298,1,0,0,0,297,295,1,0,0,0,298,299,5,34,0,0,299,35,1,
		0,0,0,300,301,5,33,0,0,301,302,3,24,12,0,302,303,5,34,0,0,303,37,1,0,0,
		0,304,305,5,35,0,0,305,308,3,24,12,0,306,307,5,42,0,0,307,309,3,24,12,
		0,308,306,1,0,0,0,309,310,1,0,0,0,310,308,1,0,0,0,310,311,1,0,0,0,311,
		312,1,0,0,0,312,313,5,36,0,0,313,39,1,0,0,0,314,315,5,31,0,0,315,41,1,
		0,0,0,316,321,3,44,22,0,317,321,3,46,23,0,318,321,3,48,24,0,319,321,3,
		50,25,0,320,316,1,0,0,0,320,317,1,0,0,0,320,318,1,0,0,0,320,319,1,0,0,
		0,321,43,1,0,0,0,322,323,7,6,0,0,323,45,1,0,0,0,324,325,5,24,0,0,325,47,
		1,0,0,0,326,327,5,25,0,0,327,49,1,0,0,0,328,329,5,20,0,0,329,51,1,0,0,
		0,330,331,5,27,0,0,331,332,3,60,30,0,332,53,1,0,0,0,333,334,3,60,30,0,
		334,336,5,40,0,0,335,337,3,58,29,0,336,335,1,0,0,0,336,337,1,0,0,0,337,
		338,1,0,0,0,338,339,3,60,30,0,339,55,1,0,0,0,340,341,5,28,0,0,341,57,1,
		0,0,0,342,343,7,2,0,0,343,59,1,0,0,0,344,345,5,23,0,0,345,61,1,0,0,0,27,
		65,76,85,105,118,125,133,139,150,156,168,178,183,190,206,237,239,249,254,
		262,274,284,289,295,310,320,336
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Fictoria.Logic.Lexer
