//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Logic/Grammar/Logic.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Fictoria.Logic.Lexer {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class LogicParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, IF=23, ELSE=24, IDENTIFIER=25, 
		INT=26, FLOAT=27, ACTS=28, AT=29, AMP=30, TILDE=31, QUESTION=32, WILDCARD=33, 
		EQUALS=34, OPEN_PAREN=35, CLOSE_PAREN=36, OPEN_BRACK=37, CLOSE_BRACK=38, 
		OPEN_BRACE=39, CLOSE_BRACE=40, PIPE=41, COLON=42, SEMICOLON=43, COMMA=44, 
		PERIOD=45, WHITESPACE=46, LINE_COMMENT=47;
	public const int
		RULE_logic = 0, RULE_statement = 1, RULE_type = 2, RULE_schema = 3, RULE_fact = 4, 
		RULE_antifact = 5, RULE_argument = 6, RULE_function = 7, RULE_action = 8, 
		RULE_series = 9, RULE_expression = 10, RULE_if = 11, RULE_condition = 12, 
		RULE_block = 13, RULE_assign = 14, RULE_call = 15, RULE_parenthetical = 16, 
		RULE_tuple = 17, RULE_wildcard = 18, RULE_literal = 19, RULE_literalBool = 20, 
		RULE_literalInt = 21, RULE_literalFloat = 22, RULE_literalString = 23, 
		RULE_binding = 24, RULE_parameter = 25, RULE_many = 26, RULE_variance = 27, 
		RULE_identifier = 28;
	public static readonly string[] ruleNames = {
		"logic", "statement", "type", "schema", "fact", "antifact", "argument", 
		"function", "action", "series", "expression", "if", "condition", "block", 
		"assign", "call", "parenthetical", "tuple", "wildcard", "literal", "literalBool", 
		"literalInt", "literalFloat", "literalString", "binding", "parameter", 
		"many", "variance", "identifier"
	};

	private static readonly string[] _LiteralNames = {
		null, "'space:'", "'cost:'", "'conditions:'", "'effects:'", "'-'", "'!'", 
		"'::'", "'+'", "'*'", "'/'", "'>'", "'<'", "'>='", "'<='", "'=='", "'!='", 
		"'and'", "'or'", "'xor'", "'true'", "'false'", "'\"'", "'if'", "'else'", 
		null, null, null, "'->'", "'@'", "'&'", "'~'", "'?'", "'_'", "'='", "'('", 
		"')'", "'['", "']'", "'{'", "'}'", "'|'", "':'", "';'", "','", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, "IF", 
		"ELSE", "IDENTIFIER", "INT", "FLOAT", "ACTS", "AT", "AMP", "TILDE", "QUESTION", 
		"WILDCARD", "EQUALS", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACK", "CLOSE_BRACK", 
		"OPEN_BRACE", "CLOSE_BRACE", "PIPE", "COLON", "SEMICOLON", "COMMA", "PERIOD", 
		"WHITESPACE", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Logic.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LogicParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LogicParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LogicParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class LogicContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(LogicParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public LogicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logic; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterLogic(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitLogic(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicContext logic() {
		LogicContext _localctx = new LogicContext(Context, State);
		EnterRule(_localctx, 0, RULE_logic);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 58;
				statement();
				}
				}
				State = 61;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 3254779904L) != 0) );
			State = 63;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SchemaContext schema() {
			return GetRuleContext<SchemaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactContext fact() {
			return GetRuleContext<FactContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AntifactContext antifact() {
			return GetRuleContext<AntifactContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 71;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 65;
				type();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 66;
				schema();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 67;
				fact();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 68;
				antifact();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 69;
				function();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 70;
				action();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(LogicParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERIOD() { return GetToken(LogicParser.PERIOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(LogicParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(LogicParser.COMMA, i);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 4, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			identifier();
			State = 74;
			Match(COLON);
			State = 75;
			identifier();
			State = 80;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 76;
				Match(COMMA);
				State = 77;
				identifier();
				}
				}
				State = 82;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 83;
			Match(PERIOD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SchemaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(LogicParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(LogicParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERIOD() { return GetToken(LogicParser.PERIOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(LogicParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(LogicParser.COMMA, i);
		}
		public SchemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schema; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterSchema(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitSchema(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSchema(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SchemaContext schema() {
		SchemaContext _localctx = new SchemaContext(Context, State);
		EnterRule(_localctx, 6, RULE_schema);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85;
			identifier();
			State = 86;
			Match(OPEN_PAREN);
			State = 87;
			parameter();
			State = 92;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 88;
				Match(COMMA);
				State = 89;
				parameter();
				}
				}
				State = 94;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 95;
			Match(CLOSE_PAREN);
			State = 96;
			Match(PERIOD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(LogicParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(LogicParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERIOD() { return GetToken(LogicParser.PERIOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(LogicParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(LogicParser.COMMA, i);
		}
		public FactContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fact; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterFact(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitFact(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFact(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactContext fact() {
		FactContext _localctx = new FactContext(Context, State);
		EnterRule(_localctx, 8, RULE_fact);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			identifier();
			State = 99;
			Match(OPEN_PAREN);
			State = 100;
			argument();
			State = 105;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 101;
				Match(COMMA);
				State = 102;
				argument();
				}
				}
				State = 107;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 108;
			Match(CLOSE_PAREN);
			State = 109;
			Match(PERIOD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AntifactContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CallContext call() {
			return GetRuleContext<CallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERIOD() { return GetToken(LogicParser.PERIOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TILDE() { return GetToken(LogicParser.TILDE, 0); }
		public AntifactContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_antifact; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterAntifact(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitAntifact(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAntifact(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AntifactContext antifact() {
		AntifactContext _localctx = new AntifactContext(Context, State);
		EnterRule(_localctx, 10, RULE_antifact);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TILDE) {
				{
				State = 111;
				Match(TILDE);
				}
			}

			State = 114;
			call();
			State = 115;
			Match(PERIOD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 12, RULE_argument);
		try {
			State = 119;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__19:
			case T__20:
			case T__21:
			case INT:
			case FLOAT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 117;
				literal();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 118;
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(LogicParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(LogicParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(LogicParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SeriesContext series() {
			return GetRuleContext<SeriesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERIOD() { return GetToken(LogicParser.PERIOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(LogicParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(LogicParser.COMMA, i);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 14, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121;
			identifier();
			State = 122;
			Match(OPEN_PAREN);
			State = 124;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 123;
				parameter();
				}
			}

			State = 130;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 126;
				Match(COMMA);
				State = 127;
				parameter();
				}
				}
				State = 132;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 133;
			Match(CLOSE_PAREN);
			State = 134;
			Match(EQUALS);
			State = 135;
			series();
			State = 136;
			Match(PERIOD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(LogicParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(LogicParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(LogicParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SeriesContext[] series() {
			return GetRuleContexts<SeriesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SeriesContext series(int i) {
			return GetRuleContext<SeriesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PERIOD() { return GetTokens(LogicParser.PERIOD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERIOD(int i) {
			return GetToken(LogicParser.PERIOD, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(LogicParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(LogicParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(LogicParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionContext action() {
		ActionContext _localctx = new ActionContext(Context, State);
		EnterRule(_localctx, 16, RULE_action);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138;
			identifier();
			State = 139;
			Match(OPEN_PAREN);
			State = 141;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 140;
				parameter();
				}
			}

			State = 147;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 143;
				Match(COMMA);
				State = 144;
				parameter();
				}
				}
				State = 149;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 150;
			Match(CLOSE_PAREN);
			State = 151;
			Match(OPEN_BRACE);
			State = 152;
			Match(T__0);
			State = 153;
			series();
			State = 154;
			Match(PERIOD);
			State = 155;
			Match(T__1);
			State = 156;
			series();
			State = 157;
			Match(PERIOD);
			State = 158;
			Match(T__2);
			State = 159;
			series();
			State = 160;
			Match(PERIOD);
			State = 161;
			Match(T__3);
			State = 163;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 162;
				statement();
				}
				}
				State = 165;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 3254779904L) != 0) );
			State = 167;
			Match(CLOSE_BRACE);
			State = 168;
			Match(PERIOD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeriesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(LogicParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(LogicParser.SEMICOLON, i);
		}
		public SeriesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_series; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterSeries(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitSeries(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeries(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SeriesContext series() {
		SeriesContext _localctx = new SeriesContext(Context, State);
		EnterRule(_localctx, 18, RULE_series);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170;
			expression(0);
			State = 175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMICOLON) {
				{
				{
				State = 171;
				Match(SEMICOLON);
				State = 172;
				expression(0);
				}
				}
				State = 177;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CallExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public CallContext call() {
			return GetRuleContext<CallContext>(0);
		}
		public CallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterCallExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitCallExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BindingExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public BindingContext binding() {
			return GetRuleContext<BindingContext>(0);
		}
		public BindingExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterBindingExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitBindingExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBindingExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TupleExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public TupleContext tuple() {
			return GetRuleContext<TupleContext>(0);
		}
		public TupleExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterTupleExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitTupleExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InfixExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public InfixExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterInfixExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitInfixExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInfixExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WildcardExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public WildcardContext wildcard() {
			return GetRuleContext<WildcardContext>(0);
		}
		public WildcardExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterWildcardExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitWildcardExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWildcardExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignContext assign() {
			return GetRuleContext<AssignContext>(0);
		}
		public AssignExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterAssignExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitAssignExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IdentifierExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterIdentifierExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitIdentifierExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParentheticalContext parenthetical() {
			return GetRuleContext<ParentheticalContext>(0);
		}
		public ParenExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterParenExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitParenExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterLiteralExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitLiteralExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfContext @if() {
			return GetRuleContext<IfContext>(0);
		}
		public IfExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterIfExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitIfExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryExpressionContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 190;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				_localctx = new LiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 179;
				literal();
				}
				break;
			case 2:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 180;
				identifier();
				}
				break;
			case 3:
				{
				_localctx = new WildcardExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 181;
				wildcard();
				}
				break;
			case 4:
				{
				_localctx = new BindingExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 182;
				binding();
				}
				break;
			case 5:
				{
				_localctx = new ParenExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 183;
				parenthetical();
				}
				break;
			case 6:
				{
				_localctx = new TupleExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 184;
				tuple();
				}
				break;
			case 7:
				{
				_localctx = new CallExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 185;
				call();
				}
				break;
			case 8:
				{
				_localctx = new AssignExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 186;
				assign();
				}
				break;
			case 9:
				{
				_localctx = new IfExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 187;
				@if();
				}
				break;
			case 10:
				{
				_localctx = new UnaryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 188;
				((UnaryExpressionContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==T__4 || _la==T__5) ) {
					((UnaryExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 189;
				expression(7);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 212;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 210;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
					case 1:
						{
						_localctx = new InfixExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((InfixExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 192;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 193;
						((InfixExpressionContext)_localctx).op = Match(T__6);
						State = 194;
						((InfixExpressionContext)_localctx).right = expression(7);
						}
						break;
					case 2:
						{
						_localctx = new InfixExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((InfixExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 195;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 196;
						((InfixExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__4 || _la==T__7) ) {
							((InfixExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 197;
						((InfixExpressionContext)_localctx).right = expression(6);
						}
						break;
					case 3:
						{
						_localctx = new InfixExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((InfixExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 198;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 199;
						((InfixExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__8 || _la==T__9) ) {
							((InfixExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 200;
						((InfixExpressionContext)_localctx).right = expression(5);
						}
						break;
					case 4:
						{
						_localctx = new InfixExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((InfixExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 201;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 202;
						((InfixExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 30720L) != 0)) ) {
							((InfixExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 203;
						((InfixExpressionContext)_localctx).right = expression(4);
						}
						break;
					case 5:
						{
						_localctx = new InfixExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((InfixExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 204;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 205;
						((InfixExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__14 || _la==T__15) ) {
							((InfixExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 206;
						((InfixExpressionContext)_localctx).right = expression(3);
						}
						break;
					case 6:
						{
						_localctx = new InfixExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((InfixExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 207;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 208;
						((InfixExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 917504L) != 0)) ) {
							((InfixExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 209;
						((InfixExpressionContext)_localctx).right = expression(2);
						}
						break;
					}
					} 
				}
				State = 214;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class IfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF() { return GetTokens(LogicParser.IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF(int i) {
			return GetToken(LogicParser.IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext[] condition() {
			return GetRuleContexts<ConditionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition(int i) {
			return GetRuleContext<ConditionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELSE() { return GetTokens(LogicParser.ELSE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE(int i) {
			return GetToken(LogicParser.ELSE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfContext @if() {
		IfContext _localctx = new IfContext(Context, State);
		EnterRule(_localctx, 22, RULE_if);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 215;
			Match(IF);
			State = 216;
			condition();
			State = 222;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 217;
					Match(ELSE);
					State = 218;
					Match(IF);
					State = 219;
					condition();
					}
					} 
				}
				State = 224;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			State = 227;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				State = 225;
				Match(ELSE);
				State = 226;
				block();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(LogicParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(LogicParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(LogicParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(LogicParser.SEMICOLON, i);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 24, RULE_condition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229;
			Match(OPEN_PAREN);
			State = 230;
			expression(0);
			State = 235;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMICOLON) {
				{
				{
				State = 231;
				Match(SEMICOLON);
				State = 232;
				expression(0);
				}
				}
				State = 237;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 238;
			Match(CLOSE_PAREN);
			State = 239;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(LogicParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(LogicParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(LogicParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(LogicParser.SEMICOLON, i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 26, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 241;
			Match(OPEN_BRACE);
			State = 242;
			expression(0);
			State = 247;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMICOLON) {
				{
				{
				State = 243;
				Match(SEMICOLON);
				State = 244;
				expression(0);
				}
				}
				State = 249;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 250;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(LogicParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignContext assign() {
		AssignContext _localctx = new AssignContext(Context, State);
		EnterRule(_localctx, 28, RULE_assign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 252;
			identifier();
			State = 253;
			Match(EQUALS);
			State = 254;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(LogicParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(LogicParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ManyContext many() {
			return GetRuleContext<ManyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(LogicParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(LogicParser.COMMA, i);
		}
		public CallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallContext call() {
		CallContext _localctx = new CallContext(Context, State);
		EnterRule(_localctx, 30, RULE_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AMP) {
				{
				State = 256;
				many();
				}
			}

			State = 259;
			identifier();
			State = 260;
			Match(OPEN_PAREN);
			State = 262;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 182249848928L) != 0)) {
				{
				State = 261;
				expression(0);
				}
			}

			State = 268;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 264;
				Match(COMMA);
				State = 265;
				expression(0);
				}
				}
				State = 270;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 271;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParentheticalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(LogicParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(LogicParser.CLOSE_PAREN, 0); }
		public ParentheticalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthetical; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterParenthetical(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitParenthetical(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthetical(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParentheticalContext parenthetical() {
		ParentheticalContext _localctx = new ParentheticalContext(Context, State);
		EnterRule(_localctx, 32, RULE_parenthetical);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273;
			Match(OPEN_PAREN);
			State = 274;
			expression(0);
			State = 275;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACK() { return GetToken(LogicParser.OPEN_BRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACK() { return GetToken(LogicParser.CLOSE_BRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(LogicParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(LogicParser.COMMA, i);
		}
		public TupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTuple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleContext tuple() {
		TupleContext _localctx = new TupleContext(Context, State);
		EnterRule(_localctx, 34, RULE_tuple);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277;
			Match(OPEN_BRACK);
			State = 278;
			expression(0);
			State = 281;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 279;
				Match(COMMA);
				State = 280;
				expression(0);
				}
				}
				State = 283;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==COMMA );
			State = 285;
			Match(CLOSE_BRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WildcardContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WILDCARD() { return GetToken(LogicParser.WILDCARD, 0); }
		public WildcardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wildcard; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterWildcard(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitWildcard(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWildcard(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WildcardContext wildcard() {
		WildcardContext _localctx = new WildcardContext(Context, State);
		EnterRule(_localctx, 36, RULE_wildcard);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 287;
			Match(WILDCARD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralBoolContext literalBool() {
			return GetRuleContext<LiteralBoolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralIntContext literalInt() {
			return GetRuleContext<LiteralIntContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralFloatContext literalFloat() {
			return GetRuleContext<LiteralFloatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralStringContext literalString() {
			return GetRuleContext<LiteralStringContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 38, RULE_literal);
		try {
			State = 293;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__19:
			case T__20:
				EnterOuterAlt(_localctx, 1);
				{
				State = 289;
				literalBool();
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 290;
				literalInt();
				}
				break;
			case FLOAT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 291;
				literalFloat();
				}
				break;
			case T__21:
				EnterOuterAlt(_localctx, 4);
				{
				State = 292;
				literalString();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralBoolContext : ParserRuleContext {
		public LiteralBoolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalBool; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterLiteralBool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitLiteralBool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralBool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralBoolContext literalBool() {
		LiteralBoolContext _localctx = new LiteralBoolContext(Context, State);
		EnterRule(_localctx, 40, RULE_literalBool);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295;
			_la = TokenStream.LA(1);
			if ( !(_la==T__19 || _la==T__20) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralIntContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(LogicParser.INT, 0); }
		public LiteralIntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalInt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterLiteralInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitLiteralInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralIntContext literalInt() {
		LiteralIntContext _localctx = new LiteralIntContext(Context, State);
		EnterRule(_localctx, 42, RULE_literalInt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 297;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralFloatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(LogicParser.FLOAT, 0); }
		public LiteralFloatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalFloat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterLiteralFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitLiteralFloat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralFloat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralFloatContext literalFloat() {
		LiteralFloatContext _localctx = new LiteralFloatContext(Context, State);
		EnterRule(_localctx, 44, RULE_literalFloat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 299;
			Match(FLOAT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralStringContext : ParserRuleContext {
		public LiteralStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterLiteralString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitLiteralString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralStringContext literalString() {
		LiteralStringContext _localctx = new LiteralStringContext(Context, State);
		EnterRule(_localctx, 46, RULE_literalString);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 301;
			Match(T__21);
			State = 305;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 302;
					MatchWildcard();
					}
					} 
				}
				State = 307;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			State = 308;
			Match(T__21);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BindingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(LogicParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public BindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binding; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterBinding(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitBinding(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinding(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BindingContext binding() {
		BindingContext _localctx = new BindingContext(Context, State);
		EnterRule(_localctx, 48, RULE_binding);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 310;
			Match(AT);
			State = 311;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(LogicParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarianceContext variance() {
			return GetRuleContext<VarianceContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 50, RULE_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 313;
			identifier();
			State = 314;
			Match(COLON);
			State = 316;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4 || _la==T__7) {
				{
				State = 315;
				variance();
				}
			}

			State = 318;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ManyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMP() { return GetToken(LogicParser.AMP, 0); }
		public ManyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_many; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterMany(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitMany(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMany(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ManyContext many() {
		ManyContext _localctx = new ManyContext(Context, State);
		EnterRule(_localctx, 52, RULE_many);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 320;
			Match(AMP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarianceContext : ParserRuleContext {
		public VarianceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variance; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterVariance(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitVariance(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariance(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarianceContext variance() {
		VarianceContext _localctx = new VarianceContext(Context, State);
		EnterRule(_localctx, 54, RULE_variance);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 322;
			_la = TokenStream.LA(1);
			if ( !(_la==T__4 || _la==T__7) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LogicParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILogicListener typedListener = listener as ILogicListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILogicVisitor<TResult> typedVisitor = visitor as ILogicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 56, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 324;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 10: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		case 1: return Precpred(Context, 5);
		case 2: return Precpred(Context, 4);
		case 3: return Precpred(Context, 3);
		case 4: return Precpred(Context, 2);
		case 5: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,47,327,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		1,0,4,0,60,8,0,11,0,12,0,61,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,3,1,72,8,1,
		1,2,1,2,1,2,1,2,1,2,5,2,79,8,2,10,2,12,2,82,9,2,1,2,1,2,1,3,1,3,1,3,1,
		3,1,3,5,3,91,8,3,10,3,12,3,94,9,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,5,4,
		104,8,4,10,4,12,4,107,9,4,1,4,1,4,1,4,1,5,3,5,113,8,5,1,5,1,5,1,5,1,6,
		1,6,3,6,120,8,6,1,7,1,7,1,7,3,7,125,8,7,1,7,1,7,5,7,129,8,7,10,7,12,7,
		132,9,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,3,8,142,8,8,1,8,1,8,5,8,146,8,
		8,10,8,12,8,149,9,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
		8,4,8,164,8,8,11,8,12,8,165,1,8,1,8,1,8,1,9,1,9,1,9,5,9,174,8,9,10,9,12,
		9,177,9,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
		3,10,191,8,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,
		10,1,10,1,10,1,10,1,10,1,10,1,10,5,10,211,8,10,10,10,12,10,214,9,10,1,
		11,1,11,1,11,1,11,1,11,5,11,221,8,11,10,11,12,11,224,9,11,1,11,1,11,3,
		11,228,8,11,1,12,1,12,1,12,1,12,5,12,234,8,12,10,12,12,12,237,9,12,1,12,
		1,12,1,12,1,13,1,13,1,13,1,13,5,13,246,8,13,10,13,12,13,249,9,13,1,13,
		1,13,1,14,1,14,1,14,1,14,1,15,3,15,258,8,15,1,15,1,15,1,15,3,15,263,8,
		15,1,15,1,15,5,15,267,8,15,10,15,12,15,270,9,15,1,15,1,15,1,16,1,16,1,
		16,1,16,1,17,1,17,1,17,1,17,4,17,282,8,17,11,17,12,17,283,1,17,1,17,1,
		18,1,18,1,19,1,19,1,19,1,19,3,19,294,8,19,1,20,1,20,1,21,1,21,1,22,1,22,
		1,23,1,23,5,23,304,8,23,10,23,12,23,307,9,23,1,23,1,23,1,24,1,24,1,24,
		1,25,1,25,1,25,3,25,317,8,25,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,
		28,1,305,1,20,29,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,
		40,42,44,46,48,50,52,54,56,0,7,1,0,5,6,2,0,5,5,8,8,1,0,9,10,1,0,11,14,
		1,0,15,16,1,0,17,19,1,0,20,21,342,0,59,1,0,0,0,2,71,1,0,0,0,4,73,1,0,0,
		0,6,85,1,0,0,0,8,98,1,0,0,0,10,112,1,0,0,0,12,119,1,0,0,0,14,121,1,0,0,
		0,16,138,1,0,0,0,18,170,1,0,0,0,20,190,1,0,0,0,22,215,1,0,0,0,24,229,1,
		0,0,0,26,241,1,0,0,0,28,252,1,0,0,0,30,257,1,0,0,0,32,273,1,0,0,0,34,277,
		1,0,0,0,36,287,1,0,0,0,38,293,1,0,0,0,40,295,1,0,0,0,42,297,1,0,0,0,44,
		299,1,0,0,0,46,301,1,0,0,0,48,310,1,0,0,0,50,313,1,0,0,0,52,320,1,0,0,
		0,54,322,1,0,0,0,56,324,1,0,0,0,58,60,3,2,1,0,59,58,1,0,0,0,60,61,1,0,
		0,0,61,59,1,0,0,0,61,62,1,0,0,0,62,63,1,0,0,0,63,64,5,0,0,1,64,1,1,0,0,
		0,65,72,3,4,2,0,66,72,3,6,3,0,67,72,3,8,4,0,68,72,3,10,5,0,69,72,3,14,
		7,0,70,72,3,16,8,0,71,65,1,0,0,0,71,66,1,0,0,0,71,67,1,0,0,0,71,68,1,0,
		0,0,71,69,1,0,0,0,71,70,1,0,0,0,72,3,1,0,0,0,73,74,3,56,28,0,74,75,5,42,
		0,0,75,80,3,56,28,0,76,77,5,44,0,0,77,79,3,56,28,0,78,76,1,0,0,0,79,82,
		1,0,0,0,80,78,1,0,0,0,80,81,1,0,0,0,81,83,1,0,0,0,82,80,1,0,0,0,83,84,
		5,45,0,0,84,5,1,0,0,0,85,86,3,56,28,0,86,87,5,35,0,0,87,92,3,50,25,0,88,
		89,5,44,0,0,89,91,3,50,25,0,90,88,1,0,0,0,91,94,1,0,0,0,92,90,1,0,0,0,
		92,93,1,0,0,0,93,95,1,0,0,0,94,92,1,0,0,0,95,96,5,36,0,0,96,97,5,45,0,
		0,97,7,1,0,0,0,98,99,3,56,28,0,99,100,5,35,0,0,100,105,3,12,6,0,101,102,
		5,44,0,0,102,104,3,12,6,0,103,101,1,0,0,0,104,107,1,0,0,0,105,103,1,0,
		0,0,105,106,1,0,0,0,106,108,1,0,0,0,107,105,1,0,0,0,108,109,5,36,0,0,109,
		110,5,45,0,0,110,9,1,0,0,0,111,113,5,31,0,0,112,111,1,0,0,0,112,113,1,
		0,0,0,113,114,1,0,0,0,114,115,3,30,15,0,115,116,5,45,0,0,116,11,1,0,0,
		0,117,120,3,38,19,0,118,120,3,56,28,0,119,117,1,0,0,0,119,118,1,0,0,0,
		120,13,1,0,0,0,121,122,3,56,28,0,122,124,5,35,0,0,123,125,3,50,25,0,124,
		123,1,0,0,0,124,125,1,0,0,0,125,130,1,0,0,0,126,127,5,44,0,0,127,129,3,
		50,25,0,128,126,1,0,0,0,129,132,1,0,0,0,130,128,1,0,0,0,130,131,1,0,0,
		0,131,133,1,0,0,0,132,130,1,0,0,0,133,134,5,36,0,0,134,135,5,34,0,0,135,
		136,3,18,9,0,136,137,5,45,0,0,137,15,1,0,0,0,138,139,3,56,28,0,139,141,
		5,35,0,0,140,142,3,50,25,0,141,140,1,0,0,0,141,142,1,0,0,0,142,147,1,0,
		0,0,143,144,5,44,0,0,144,146,3,50,25,0,145,143,1,0,0,0,146,149,1,0,0,0,
		147,145,1,0,0,0,147,148,1,0,0,0,148,150,1,0,0,0,149,147,1,0,0,0,150,151,
		5,36,0,0,151,152,5,39,0,0,152,153,5,1,0,0,153,154,3,18,9,0,154,155,5,45,
		0,0,155,156,5,2,0,0,156,157,3,18,9,0,157,158,5,45,0,0,158,159,5,3,0,0,
		159,160,3,18,9,0,160,161,5,45,0,0,161,163,5,4,0,0,162,164,3,2,1,0,163,
		162,1,0,0,0,164,165,1,0,0,0,165,163,1,0,0,0,165,166,1,0,0,0,166,167,1,
		0,0,0,167,168,5,40,0,0,168,169,5,45,0,0,169,17,1,0,0,0,170,175,3,20,10,
		0,171,172,5,43,0,0,172,174,3,20,10,0,173,171,1,0,0,0,174,177,1,0,0,0,175,
		173,1,0,0,0,175,176,1,0,0,0,176,19,1,0,0,0,177,175,1,0,0,0,178,179,6,10,
		-1,0,179,191,3,38,19,0,180,191,3,56,28,0,181,191,3,36,18,0,182,191,3,48,
		24,0,183,191,3,32,16,0,184,191,3,34,17,0,185,191,3,30,15,0,186,191,3,28,
		14,0,187,191,3,22,11,0,188,189,7,0,0,0,189,191,3,20,10,7,190,178,1,0,0,
		0,190,180,1,0,0,0,190,181,1,0,0,0,190,182,1,0,0,0,190,183,1,0,0,0,190,
		184,1,0,0,0,190,185,1,0,0,0,190,186,1,0,0,0,190,187,1,0,0,0,190,188,1,
		0,0,0,191,212,1,0,0,0,192,193,10,6,0,0,193,194,5,7,0,0,194,211,3,20,10,
		7,195,196,10,5,0,0,196,197,7,1,0,0,197,211,3,20,10,6,198,199,10,4,0,0,
		199,200,7,2,0,0,200,211,3,20,10,5,201,202,10,3,0,0,202,203,7,3,0,0,203,
		211,3,20,10,4,204,205,10,2,0,0,205,206,7,4,0,0,206,211,3,20,10,3,207,208,
		10,1,0,0,208,209,7,5,0,0,209,211,3,20,10,2,210,192,1,0,0,0,210,195,1,0,
		0,0,210,198,1,0,0,0,210,201,1,0,0,0,210,204,1,0,0,0,210,207,1,0,0,0,211,
		214,1,0,0,0,212,210,1,0,0,0,212,213,1,0,0,0,213,21,1,0,0,0,214,212,1,0,
		0,0,215,216,5,23,0,0,216,222,3,24,12,0,217,218,5,24,0,0,218,219,5,23,0,
		0,219,221,3,24,12,0,220,217,1,0,0,0,221,224,1,0,0,0,222,220,1,0,0,0,222,
		223,1,0,0,0,223,227,1,0,0,0,224,222,1,0,0,0,225,226,5,24,0,0,226,228,3,
		26,13,0,227,225,1,0,0,0,227,228,1,0,0,0,228,23,1,0,0,0,229,230,5,35,0,
		0,230,235,3,20,10,0,231,232,5,43,0,0,232,234,3,20,10,0,233,231,1,0,0,0,
		234,237,1,0,0,0,235,233,1,0,0,0,235,236,1,0,0,0,236,238,1,0,0,0,237,235,
		1,0,0,0,238,239,5,36,0,0,239,240,3,26,13,0,240,25,1,0,0,0,241,242,5,39,
		0,0,242,247,3,20,10,0,243,244,5,43,0,0,244,246,3,20,10,0,245,243,1,0,0,
		0,246,249,1,0,0,0,247,245,1,0,0,0,247,248,1,0,0,0,248,250,1,0,0,0,249,
		247,1,0,0,0,250,251,5,40,0,0,251,27,1,0,0,0,252,253,3,56,28,0,253,254,
		5,34,0,0,254,255,3,20,10,0,255,29,1,0,0,0,256,258,3,52,26,0,257,256,1,
		0,0,0,257,258,1,0,0,0,258,259,1,0,0,0,259,260,3,56,28,0,260,262,5,35,0,
		0,261,263,3,20,10,0,262,261,1,0,0,0,262,263,1,0,0,0,263,268,1,0,0,0,264,
		265,5,44,0,0,265,267,3,20,10,0,266,264,1,0,0,0,267,270,1,0,0,0,268,266,
		1,0,0,0,268,269,1,0,0,0,269,271,1,0,0,0,270,268,1,0,0,0,271,272,5,36,0,
		0,272,31,1,0,0,0,273,274,5,35,0,0,274,275,3,20,10,0,275,276,5,36,0,0,276,
		33,1,0,0,0,277,278,5,37,0,0,278,281,3,20,10,0,279,280,5,44,0,0,280,282,
		3,20,10,0,281,279,1,0,0,0,282,283,1,0,0,0,283,281,1,0,0,0,283,284,1,0,
		0,0,284,285,1,0,0,0,285,286,5,38,0,0,286,35,1,0,0,0,287,288,5,33,0,0,288,
		37,1,0,0,0,289,294,3,40,20,0,290,294,3,42,21,0,291,294,3,44,22,0,292,294,
		3,46,23,0,293,289,1,0,0,0,293,290,1,0,0,0,293,291,1,0,0,0,293,292,1,0,
		0,0,294,39,1,0,0,0,295,296,7,6,0,0,296,41,1,0,0,0,297,298,5,26,0,0,298,
		43,1,0,0,0,299,300,5,27,0,0,300,45,1,0,0,0,301,305,5,22,0,0,302,304,9,
		0,0,0,303,302,1,0,0,0,304,307,1,0,0,0,305,306,1,0,0,0,305,303,1,0,0,0,
		306,308,1,0,0,0,307,305,1,0,0,0,308,309,5,22,0,0,309,47,1,0,0,0,310,311,
		5,29,0,0,311,312,3,56,28,0,312,49,1,0,0,0,313,314,3,56,28,0,314,316,5,
		42,0,0,315,317,3,54,27,0,316,315,1,0,0,0,316,317,1,0,0,0,317,318,1,0,0,
		0,318,319,3,56,28,0,319,51,1,0,0,0,320,321,5,30,0,0,321,53,1,0,0,0,322,
		323,7,1,0,0,323,55,1,0,0,0,324,325,5,25,0,0,325,57,1,0,0,0,27,61,71,80,
		92,105,112,119,124,130,141,147,165,175,190,210,212,222,227,235,247,257,
		262,268,283,293,305,316
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Fictoria.Logic.Lexer
