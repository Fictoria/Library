// general
search(t: thing) -> {
    "cost": 1000,
    "terms": ["location", str(t)],
    "space":
        &searchable(@all); all,
    "conditions":
        !location(t, _, _),
    "locals":
        name = str(t) + "_" + id(),
    "effects":
        instantiate(name, t).
        location(name, 0, 0).
}.

deposit(b: building, m: material) -> {
    "cost": 1,
    "terms": [str(b), str(m)],
    "space":
        instances(building) * instances(material),
    "conditions":
        location(b, _, _) and
        consumes(b, m) and
        !contains(b, m) and
        carrying(m),
    "effects":
        contains(b, m).
        ~carrying(_).
}.

drop(t: thing) -> {
    "cost": 1,
    "terms": ["carrying", str(t)],
    "space":
        &carrying(@c); c,
    "conditions":
        carrying(t),
    "effects":
        ~carrying(t).
         // thing should now be at current location
}.

// campfire
light(c: campfire) -> {
    "cost": 2,
    "terms": ["campfire", "wood", "fire"],
    "space":
        instances(campfire),
    "conditions":
        location(c, _, _) and
        contains(c, wood),
    "locals":
        name = str(c) + "_" + id(),
    "effects":
        instantiate(name, fire).
        location(name, 0, 0).
        ~contains(name, wood).
        // TODO need to destroy the wood instance and facts
}.

// homeostasis
warm(f: fire) -> {
    "cost": 1, // TODO distance
    "terms": ["fire"],
    "space":
        &instance(@all, fire); all,
    "conditions":
        !warm(self) and
        location(f, _, _),
    "effects":
        warm(self).
}.

// material
gather(m: material) -> {
    "cost": 2, // TODO distance
    "terms": ["carrying", str(m)],
    "space":
        instances(material),
    "conditions":
        !carrying(_) and
        location(m, _, _),
    "effects":
        carrying(m).
        ~location(m, _, _).
}.

// extract
extract(r: resource, m: material) -> {
    "cost": 20, // TODO distance
    "terms": [str(r), str(m)],
    "space":
        instances(resource) * subtypes(material),
    "conditions":
        provides(r, m) and
        location(r, _, _) and
        !location(m, _, _),
    "proximity":
        location(r, @x, @y); [x, y],
    "locals":
        name = str(m) + "_" + id(),
    "effects":
        instantiate(name, m).
        location(name, 0, 0).
}.